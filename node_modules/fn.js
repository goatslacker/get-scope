function head(xs) {
  return xs[0]
}

function init(xs) {
  return xs.slice(0, xs.length - 1)
}

function tail(xs) {
  return xs.slice(1)
}

function last(xs) {
  return xs[xs.length - 1]
}

function zipWith(f, a, b) {
  var r = []
  for (var i = 0; i < Math.min(a.length, b.length); i += 1) {
    r.push(f(a[i], b[i]))
  }
  return r
}

function toMap(arr) {
  return foldl(function (obj, x) {
    var key = x[0]
    var val = x[1]
    obj[key] = val
    return obj
  }, arr, {})
}

function mergeInto(base, obj) {
  Object.keys(obj).forEach(function (key) {
    base[key] = obj[key]
  })
  return base
}

function compact(arr) {
  return filter(Boolean, arr)
}

function filter(f, arr) {
  return Array.prototype.filter.call(arr, function (x) {
    return f(x)
  })
}

function map(f, arr) {
  return Array.prototype.map.call(arr, function (x) {
    return f(x)
  })
}

function concatMap(f, arr) {
  var result;
  result = [];
  arr.forEach(function (x) {
    var item;
    item = f(x);
    return Array.isArray(item) ? Array.prototype.push.apply(result, item) : result.push(item);
  });
  return result;
}

function foldl(fn, arr, accumulator) {
  var item, index, value
  var length = arr.length

  if (accumulator === undefined) {
    index = 0
    value = arr[0]
  } else {
    index = -1
    value = accumulator
  }

  while (++index < length) {
    value = fn(value, arr[index])
  }

  return value
}

function getPropertyValue(x) {
  return x.name || x.value
}

function toString(x) {
  return Object.prototype.toString.call(x)
}

module.exports = {
  head: head,
  init: init,
  tail: tail,
  last: last,
  concatMap: concatMap,
  map: map,
  filter: filter,
  foldl: foldl,
  toMap: toMap,
  compact: compact,
  mergeInto: mergeInto,
  zipWith: zipWith,
  toString: toString,
  getPropertyValue: getPropertyValue
}
